{"ast":null,"code":"var _jsxFileName = \"/Users/anushaa/Documents/my-ts-react-app/src/Components/DeliveryFeeCalculator.tsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DeliveryFeeCalculator = ({\n  inputValues\n}) => {\n  const calculateDeliveryFee = () => {\n    const {\n      cartValue,\n      deliveryDistance,\n      numberOfItems,\n      orderTime\n    } = inputValues;\n    console.log(\"input values\", inputValues);\n    if (cartValue === null || deliveryDistance === null || numberOfItems === null || orderTime === null) {\n      // Input values are not complete, cannot calculate the fee\n\n      // ADD ERROR HANDLING\n\n      // all above 0\n\n      return null;\n    }\n    if (cartValue >= 200) {\n      let totalFee = 0;\n      return totalFee;\n    }\n\n    // Calculate small order surcharge\n    const smallOrderSurcharge = Math.max(0, 10 - cartValue);\n\n    // Calculate base delivery fee for the first 1000 meters\n    let baseFee = 2;\n\n    // Calculate additional fee for every 500 meters beyond the first 1000 meters\n    const additionalDistanceFee = Math.ceil((deliveryDistance - 1000) / 500) * 1;\n\n    // Calculate item surcharge for more than 4 items\n    const itemSurcharge = numberOfItems >= 5 ? (numberOfItems - 4) * 0.5 : 0;\n\n    // Calculate bulk fee for more than 12 items\n    const bulkFee = numberOfItems > 12 ? 1.2 : 0;\n\n    // Calculate total fee before rush hour multiplier\n    let totalFee = baseFee + additionalDistanceFee + smallOrderSurcharge + itemSurcharge + bulkFee;\n\n    // Ensure the total fee does not exceed 15€\n    totalFee = Math.min(totalFee, 15);\n\n    // Check if it's Friday rush hours (3 - 7 PM)\n    const orderDate = new Date(orderTime);\n    const isFridayRush = orderDate.getDay() === 5 && orderDate.getHours() >= 15 && orderDate.getHours() < 19;\n\n    // Apply rush hour multiplier if applicable\n    if (isFridayRush) {\n      totalFee *= 1.2;\n      // Ensure the total fee does not exceed 15€ after applying rush hour multiplier\n      totalFee = Math.min(totalFee, 15);\n    }\n    return totalFee;\n  };\n  const calculatedFee = calculateDeliveryFee();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: calculatedFee !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n      \"data-test-id\": \"fee\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Calculated Delivery Fee: \", calculatedFee.toFixed(2), \"\\u20AC\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n_c = DeliveryFeeCalculator;\nexport default DeliveryFeeCalculator;\nvar _c;\n$RefreshReg$(_c, \"DeliveryFeeCalculator\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","DeliveryFeeCalculator","inputValues","calculateDeliveryFee","cartValue","deliveryDistance","numberOfItems","orderTime","console","log","totalFee","smallOrderSurcharge","Math","max","baseFee","additionalDistanceFee","ceil","itemSurcharge","bulkFee","min","orderDate","Date","isFridayRush","getDay","getHours","calculatedFee","children","toFixed","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/anushaa/Documents/my-ts-react-app/src/Components/DeliveryFeeCalculator.tsx"],"sourcesContent":["import React from 'react';\n\ninterface DeliveryFeeCalculatorProps {\n  inputValues: {\n    cartValue: number | null;\n    deliveryDistance: number | null;\n    numberOfItems: number | null;\n    orderTime: Date | null;\n  };\n}\n\nconst DeliveryFeeCalculator: React.FC<DeliveryFeeCalculatorProps> = ({ inputValues }) => {\n  const calculateDeliveryFee = () => {\n    const { cartValue, deliveryDistance, numberOfItems, orderTime } = inputValues;\n\n    console.log(\"input values\", inputValues);\n\n    if (cartValue === null || deliveryDistance === null || numberOfItems === null || orderTime === null) {\n      // Input values are not complete, cannot calculate the fee\n\n      // ADD ERROR HANDLING\n\n      // all above 0\n\n      return null;\n    }\n\n    if (cartValue >= 200) {\n      let totalFee = 0;\n      return totalFee;\n\n    }\n\n    // Calculate small order surcharge\n    const smallOrderSurcharge = Math.max(0, 10 - cartValue);\n\n    // Calculate base delivery fee for the first 1000 meters\n    let baseFee = 2;\n\n    // Calculate additional fee for every 500 meters beyond the first 1000 meters\n    const additionalDistanceFee = Math.ceil((deliveryDistance - 1000) / 500) * 1;\n\n    // Calculate item surcharge for more than 4 items\n    const itemSurcharge = numberOfItems >= 5 ? (numberOfItems - 4) * 0.5 : 0;\n\n    // Calculate bulk fee for more than 12 items\n    const bulkFee = numberOfItems > 12 ? 1.2 : 0;\n\n    // Calculate total fee before rush hour multiplier\n    let totalFee = baseFee + additionalDistanceFee + smallOrderSurcharge + itemSurcharge + bulkFee;\n\n    // Ensure the total fee does not exceed 15€\n    totalFee = Math.min(totalFee, 15);\n\n    // Check if it's Friday rush hours (3 - 7 PM)\n    const orderDate = new Date(orderTime);\n    const isFridayRush = orderDate.getDay() === 5 && orderDate.getHours() >= 15 && orderDate.getHours() < 19;\n\n    // Apply rush hour multiplier if applicable\n    if (isFridayRush) {\n      totalFee *= 1.2;\n      // Ensure the total fee does not exceed 15€ after applying rush hour multiplier\n      totalFee = Math.min(totalFee, 15);\n    }\n\n    return totalFee;\n  };\n\n  const calculatedFee = calculateDeliveryFee();\n\n  return (\n    <div>\n      {calculatedFee !== null && (\n        <div data-test-id=\"fee\">\n          <p>Calculated Delivery Fee: {calculatedFee.toFixed(2)}€</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default DeliveryFeeCalculator;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAW1B,MAAMC,qBAA2D,GAAGA,CAAC;EAAEC;AAAY,CAAC,KAAK;EACvF,MAAMC,oBAAoB,GAAGA,CAAA,KAAM;IACjC,MAAM;MAAEC,SAAS;MAAEC,gBAAgB;MAAEC,aAAa;MAAEC;IAAU,CAAC,GAAGL,WAAW;IAE7EM,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEP,WAAW,CAAC;IAExC,IAAIE,SAAS,KAAK,IAAI,IAAIC,gBAAgB,KAAK,IAAI,IAAIC,aAAa,KAAK,IAAI,IAAIC,SAAS,KAAK,IAAI,EAAE;MACnG;;MAEA;;MAEA;;MAEA,OAAO,IAAI;IACb;IAEA,IAAIH,SAAS,IAAI,GAAG,EAAE;MACpB,IAAIM,QAAQ,GAAG,CAAC;MAChB,OAAOA,QAAQ;IAEjB;;IAEA;IACA,MAAMC,mBAAmB,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE,EAAE,GAAGT,SAAS,CAAC;;IAEvD;IACA,IAAIU,OAAO,GAAG,CAAC;;IAEf;IACA,MAAMC,qBAAqB,GAAGH,IAAI,CAACI,IAAI,CAAC,CAACX,gBAAgB,GAAG,IAAI,IAAI,GAAG,CAAC,GAAG,CAAC;;IAE5E;IACA,MAAMY,aAAa,GAAGX,aAAa,IAAI,CAAC,GAAG,CAACA,aAAa,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC;;IAExE;IACA,MAAMY,OAAO,GAAGZ,aAAa,GAAG,EAAE,GAAG,GAAG,GAAG,CAAC;;IAE5C;IACA,IAAII,QAAQ,GAAGI,OAAO,GAAGC,qBAAqB,GAAGJ,mBAAmB,GAAGM,aAAa,GAAGC,OAAO;;IAE9F;IACAR,QAAQ,GAAGE,IAAI,CAACO,GAAG,CAACT,QAAQ,EAAE,EAAE,CAAC;;IAEjC;IACA,MAAMU,SAAS,GAAG,IAAIC,IAAI,CAACd,SAAS,CAAC;IACrC,MAAMe,YAAY,GAAGF,SAAS,CAACG,MAAM,CAAC,CAAC,KAAK,CAAC,IAAIH,SAAS,CAACI,QAAQ,CAAC,CAAC,IAAI,EAAE,IAAIJ,SAAS,CAACI,QAAQ,CAAC,CAAC,GAAG,EAAE;;IAExG;IACA,IAAIF,YAAY,EAAE;MAChBZ,QAAQ,IAAI,GAAG;MACf;MACAA,QAAQ,GAAGE,IAAI,CAACO,GAAG,CAACT,QAAQ,EAAE,EAAE,CAAC;IACnC;IAEA,OAAOA,QAAQ;EACjB,CAAC;EAED,MAAMe,aAAa,GAAGtB,oBAAoB,CAAC,CAAC;EAE5C,oBACEH,OAAA;IAAA0B,QAAA,EACGD,aAAa,KAAK,IAAI,iBACrBzB,OAAA;MAAK,gBAAa,KAAK;MAAA0B,QAAA,eACrB1B,OAAA;QAAA0B,QAAA,GAAG,2BAAyB,EAACD,aAAa,CAACE,OAAO,CAAC,CAAC,CAAC,EAAC,QAAC;MAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxD;EACN;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACC,EAAA,GApEI/B,qBAA2D;AAsEjE,eAAeA,qBAAqB;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}